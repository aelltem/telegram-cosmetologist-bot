import os
import logging
from dotenv import load_dotenv
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import (
    Application as TelegramApplication,
    CommandHandler,
    MessageHandler,
    CallbackContext,
    filters,
)
import openai
import random

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑ .env
load_dotenv()
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤
if not TELEGRAM_BOT_TOKEN or not OPENAI_API_KEY:
    raise ValueError("–ù–µ–æ–±—Ö–æ–¥–∏–º—ã TELEGRAM_BOT_TOKEN –∏ OPENAI_API_KEY –≤ .env")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ OpenAI
openai.api_key = OPENAI_API_KEY

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
logging.basicConfig(level=logging.INFO)

BOT_NAME = "–ü–æ–ª–∏–Ω–∞ –ü–∞–≤–ª–æ–≤–Ω–∞ üå∏"
INTRO_TEXT = (
    f"–ü—Ä–∏–≤–µ—Ç! –Ø {BOT_NAME}, –≤–∞—à –∫–æ—Å–º–µ—Ç–æ–ª–æ–≥-–±–æ—Ç üß¥\n"
    "–û–ø–∏—à–∏ —Å–≤–æ—é –ø—Ä–æ–±–ª–µ–º—É —Å –∫–æ–∂–µ–π, –≤–æ–ª–æ—Å–∞–º–∏ –∏–ª–∏ —É—Ö–æ–¥–æ–º ‚Äî –∏ —è –ø–æ–º–æ–≥—É!\n"
    "–ù–∞–ø—Ä–∏–º–µ—Ä: '–ß—Ç–æ –¥–µ–ª–∞—Ç—å —Å –ø—Ä—ã—â–∞–º–∏?' –∏–ª–∏ '–ö–∞–∫–æ–π –∫—Ä–µ–º –≤—ã–±—Ä–∞—Ç—å?'"
)

INTERESTING_FACTS = [
    "–ö–æ–∂–∞ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∫–∞–∂–¥—ã–µ 28 –¥–Ω–µ–π üåø",
    "–í–æ–ª–æ—Å—ã ‚Äî –≤—Ç–æ—Ä–æ–π –ø–æ —Å–∫–æ—Ä–æ—Å—Ç–∏ —Ä–∞—Å—Ç—É—â–∏–π –æ—Ä–≥–∞–Ω üß†",
    "–°–æ–ª–Ω—Ü–µ–∑–∞—â–∏—Ç–Ω—ã–π –∫—Ä–µ–º –Ω—É–∂–µ–Ω –¥–∞–∂–µ –≤ –ø–∞—Å–º—É—Ä–Ω—É—é –ø–æ–≥–æ–¥—É üå•",
]

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ —á–µ—Ä–µ–∑ OpenAI
def generate_response(user_input: str) -> str:
    try:
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[
                {
                    "role": "system",
                    "content": (
                        "–¢—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –≤—Ä–∞—á-–∫–æ—Å–º–µ—Ç–æ–ª–æ–≥ –ø–æ –∏–º–µ–Ω–∏ –ü–æ–ª–∏–Ω–∞ –ü–∞–≤–ª–æ–≤–Ω–∞. "
                        "–¢—ã –ø–æ–º–æ–≥–∞–µ—à—å –ª—é–¥—è–º —Å –∫–æ–∂–µ–π, –≤–æ–ª–æ—Å–∞–º–∏, –ø–æ–¥–±–æ—Ä–æ–º —Å—Ä–µ–¥—Å—Ç–≤. "
                        "–û—Ç–≤–µ—á–∞–π –¥—Ä—É–∂–µ–ª—é–±–Ω–æ, –ø–æ–Ω—è—Ç–Ω–æ –∏ —Å —ç–º–æ–¥–∑–∏."
                    )
                },
                {"role": "user", "content": user_input}
            ],
            temperature=0.7,
            max_tokens=500
        )
        return response.choices[0].message.content.strip()
    except Exception as e:
        logging.error(f"OpenAI Error: {e}")
        return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç –ò–ò üòî"

# /start
async def start(update: Update, context: CallbackContext):
    keyboard = [
        [KeyboardButton("–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —Ñ–∞–∫—Ç—ã")],
        [KeyboardButton("–ü–æ–º–æ–≥–∏—Ç–µ –≤—ã–±—Ä–∞—Ç—å —Å—Ä–µ–¥—Å—Ç–≤–∞")],
    ]
    markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text(INTRO_TEXT, reply_markup=markup)

# –û—Ç–≤–µ—Ç –Ω–∞ —Ç–µ–∫—Å—Ç
async def handle_message(update: Update, context: CallbackContext):
    text = update.message.text.strip()

    if text.lower() == "–∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —Ñ–∞–∫—Ç—ã":
        sent = context.user_data.setdefault("sent_facts", set())
        available = [f for f in INTERESTING_FACTS if f not in sent]
        if not available:
            sent.clear()
            available = INTERESTING_FACTS
        fact = random.choice(available)
        sent.add(fact)
        await update.message.reply_text(f"üí° –§–∞–∫—Ç: {fact}")
        return

    if text.lower() == "–ø–æ–º–æ–≥–∏—Ç–µ –≤—ã–±—Ä–∞—Ç—å —Å—Ä–µ–¥—Å—Ç–≤–∞":
        await update.message.reply_text("–£—Ç–æ—á–Ω–∏ –ø—Ä–æ–±–ª–µ–º—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä—ã—â–∏, –∂–∏—Ä–Ω–∞—è –∫–æ–∂–∞, —Å—É—Ö–æ—Å—Ç—å –∏ —Ç.–ø.) üß¥")
        return

    response = generate_response(text)
    await update.message.reply_text(response)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
def main():
    app = TelegramApplication.builder().token(TELEGRAM_BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    app.run_polling()

if __name__ == "__main__":
    main()
