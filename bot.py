import os
import json
import logging
import random
import threading
import http.server
import socketserver
from datetime import datetime

from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
)
from dotenv import load_dotenv
from gtts import gTTS
from apscheduler.schedulers.background import BackgroundScheduler
import httpx

# === –ò–º–ø–æ—Ä—Ç —Ñ–∞–∫—Ç–æ–≤ ===
from facts import INTERESTING_FACTS

# === –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤ ===
load_dotenv()
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
OPENROUTER_API_KEY = os.getenv("OPENROUTER_API_KEY")
OPENROUTER_MODEL = "openchat/openchat-7b"

# === –õ–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ===
logging.basicConfig(level=logging.INFO)

# === –ü—É—Ç–∏ –∫ JSON-—Ñ–∞–π–ª–∞–º ===
FILES = {
    "users": "users.json",
    "settings": "user_settings.json",
    "profile": "user_profile.json",
    "history": "history.json",
    "reminders": "reminders.json",
}

# === –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ ===
scheduler = BackgroundScheduler()
scheduler.start()

# === JSON –£—Ç–∏–ª–∏—Ç—ã ===
def load_json(name):
    try:
        with open(FILES[name], "r", encoding="utf-8") as f:
            return json.load(f)
    except:
        return {}

def save_json(name, data):
    with open(FILES[name], "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

# === –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    users = load_json("users")
    users[str(user.id)] = user.username or user.first_name
    save_json("users", users)

    keyboard = ReplyKeyboardMarkup([
        ["üß¥ –ü–æ–º–æ–≥–∏—Ç–µ –≤—ã–±—Ä–∞—Ç—å —Å—Ä–µ–¥—Å—Ç–≤–æ"],
        ["üîç –ê–Ω–∞–ª–∏–∑ —Å–æ—Å—Ç–∞–≤–∞"],
        ["üìÜ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ"],
        ["üí° –ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç"],
        ["‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"]
    ], resize_keyboard=True)

    greeting = f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! –Ø –ü–æ–ª–∏–Ω–∞ –ü–∞–≤–ª–æ–≤–Ω–∞ üå∏\n" \
               f"–ü–æ–º–æ–≥—É —Å —É—Ö–æ–¥–æ–º –∑–∞ –∫–æ–∂–µ–π, –Ω–∞–ø–æ–º–Ω—é –æ–± —É—Ö–æ–¥–µ, —Ä–∞–∑–±–µ—Ä—É —Å–æ—Å—Ç–∞–≤ –∫–æ—Å–º–µ—Ç–∏–∫–∏ –∏ –ø–æ–¥—Å–∫–∞–∂—É –ø–æ–ª–µ–∑–Ω—ã–π —Ñ–∞–∫—Ç."

    await update.message.reply_text(greeting, reply_markup=keyboard)

# === –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ===
async def handle_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    user_id = str(update.effective_user.id)

    if text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏":
        keyboard = ReplyKeyboardMarkup([
            ["üéØ –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è"],
            ["üîä –§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞"],
            ["üß† –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ"],
            ["üóÉ –ú–æ—è –∏—Å—Ç–æ—Ä–∏—è"],
            ["‚¨ÖÔ∏è –ù–∞–∑–∞–¥"]
        ], resize_keyboard=True)
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É:", reply_markup=keyboard)

    elif text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        await start(update, context)

    elif text == "üéØ –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è":
        await update.message.reply_text("–ö–∞–∫–æ–π —É —Ç–µ–±—è —Ç–∏–ø –∫–æ–∂–∏? (—Å—É—Ö–∞—è / –∂–∏—Ä–Ω–∞—è / –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è)")

    elif text == "üîä –§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞":
        await update.message.reply_text("–í—ã–±–µ—Ä–∏ —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞:", reply_markup=ReplyKeyboardMarkup([
            ["üìù –¢–µ–∫—Å—Ç"], ["üîä –ì–æ–ª–æ—Å"]
        ], resize_keyboard=True))

    elif text == "üß† –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ":
        await update.message.reply_text("–ö–∞–∫ —Ç—ã —Å–µ–±—è —á—É–≤—Å—Ç–≤—É–µ—à—å?", reply_markup=ReplyKeyboardMarkup([
            ["üòÑ –•–æ—Ä–æ—à–æ", "üòê –ù–æ—Ä–º–∞–ª—å–Ω–æ", "üòî –ü–ª–æ—Ö–æ"]
        ], resize_keyboard=True))

    elif text == "üóÉ –ú–æ—è –∏—Å—Ç–æ—Ä–∏—è":
        history = load_json("history").get(user_id, [])
        if not history:
            await update.message.reply_text("–ò—Å—Ç–æ—Ä–∏—è –ø–æ–∫–∞ –ø—É—Å—Ç–∞.")
        else:
            reply = "\n\n".join([f"‚ùì {h['q']}\nüí¨ {h['a']}" for h in history[-5:]])
            await update.message.reply_text(reply)

    elif text == "üí° –ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç":
        history = load_json("history")
        shown = history.get("facts", [])
        unused = [fact for fact in INTERESTING_FACTS if fact not in shown]
        if not unused:
            shown = []
            unused = INTERESTING_FACTS
        fact = random.choice(unused)
        shown.append(fact)
        history["facts"] = shown
        save_json("history", history)
        await update.message.reply_text(f"üí° –§–∞–∫—Ç: {fact}")

    elif text == "üìÜ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ":
        await update.message.reply_text("–ù–∞–ø–∏—à–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n21:00 –Ω–∞–Ω–µ—Å—Ç–∏ –∫—Ä–µ–º")

    elif text == "üîç –ê–Ω–∞–ª–∏–∑ —Å–æ—Å—Ç–∞–≤–∞":
        await update.message.reply_text("–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ –∏–ª–∏ —Å–æ—Å—Ç–∞–≤ ‚Äî —è —Ä–∞–∑–±–µ—Ä—É!")

    elif text == "üß¥ –ü–æ–º–æ–≥–∏—Ç–µ –≤—ã–±—Ä–∞—Ç—å —Å—Ä–µ–¥—Å—Ç–≤–æ":
        await update.message.reply_text("–ù–∞–ø–∏—à–∏ —Ç–∏–ø –ø—Ä–æ–±–ª–µ–º—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∞–∫–Ω–µ, —Å—É—Ö–æ—Å—Ç—å, —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞—è –∫–æ–∂–∞).")

    elif ":" in text and len(text) >= 8:
        if text[:5].isdigit():
            hour, minute = map(int, text[:5].split(":"))
            note = text[6:]
            reminders = load_json("reminders")
            reminders.setdefault(user_id, []).append({"time": f"{hour:02}:{minute:02}", "text": note})
            save_json("reminders", reminders)
            await update.message.reply_text("–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ ‚úÖ")
        else:
            result = await analyze_ingredients(text)
            await send_response(update, context, user_id, text, result)

    elif text in ["—Å—É—Ö–∞—è", "–∂–∏—Ä–Ω–∞—è", "–∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è"]:
        profiles = load_json("profile")
        profiles[user_id] = {"skin": text}
        save_json("profile", profiles)
        await update.message.reply_text("–ó–∞–ø–æ–º–Ω–∏–ª–∞ —Ç–∏–ø –∫–æ–∂–∏ üíñ")

    elif text in ["üìù –¢–µ–∫—Å—Ç", "üîä –ì–æ–ª–æ—Å"]:
        settings = load_json("settings")
        settings[user_id] = settings.get(user_id, {})
        settings[user_id]["voice"] = True if "–ì–æ–ª–æ—Å" in text else False
        save_json("settings", settings)
        await update.message.reply_text("–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ —Å–æ—Ö—Ä–∞–Ω—ë–Ω üéô")

    elif text in ["üòÑ –•–æ—Ä–æ—à–æ", "üòê –ù–æ—Ä–º–∞–ª—å–Ω–æ", "üòî –ü–ª–æ—Ö–æ"]:
        mood = "good" if "–•–æ—Ä–æ—à–æ" in text else "bad" if "–ü–ª–æ—Ö–æ" in text else "normal"
        settings = load_json("settings")
        settings[user_id] = settings.get(user_id, {})
        settings[user_id]["mood"] = mood
        save_json("settings", settings)
        await update.message.reply_text("–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ —É—á—Ç–µ–Ω–æ ‚ù§Ô∏è")

# === –û—Ç–≤–µ—Ç –æ—Ç AI –∏ TTS ===
async def send_response(update, context, user_id, query, answer):
    settings = load_json("settings").get(user_id, {})
    add_to_history(user_id, query, answer)

    if settings.get("voice"):
        tts = gTTS(answer, lang="ru")
        file = f"/tmp/{user_id}_resp.ogg"
        tts.save(file)
        with open(file, "rb") as f:
            await update.message.reply_voice(voice=f)
    else:
        await update.message.reply_text(answer)

# === –ò—Å—Ç–æ—Ä–∏—è ===
def add_to_history(user_id, q, a):
    hist = load_json("history")
    hist.setdefault(str(user_id), []).append({
        "q": q, "a": a, "at": datetime.now().isoformat()
    })
    save_json("history", hist)

# === –ê–Ω–∞–ª–∏–∑ —Å–æ—Å—Ç–∞–≤–∞ —á–µ—Ä–µ–∑ OpenRouter ===
async def analyze_ingredients(text):
    headers = {
        "Authorization": f"Bearer {OPENROUTER_API_KEY}",
        "HTTP-Referer": "https://t.me/polina_pavlovna_bot",
        "X-Title": "Cosmetologist Bot"
    }
    payload = {
        "model": OPENROUTER_MODEL,
        "messages": [
            {"role": "system", "content": "–¢—ã –∫–æ—Å–º–µ—Ç–æ–ª–æ–≥. –†–∞–∑–±–µ—Ä–∏ —Å–æ—Å—Ç–∞–≤ –∫–æ—Å–º–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å—Ä–µ–¥—Å—Ç–≤–∞, –æ–±—ä—è—Å–Ω–∏, –∫–∞–∫–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –ø–æ–ª–µ–∑–Ω—ã, –∞ –∫–∞–∫–∏–µ –º–æ–≥—É—Ç –Ω–∞–≤—Ä–µ–¥–∏—Ç—å."},
            {"role": "user", "content": text}
        ]
    }
    try:
        async with httpx.AsyncClient(timeout=20.0) as client:
            resp = await client.post("https://openrouter.ai/api/v1/chat/completions", headers=headers, json=payload)
            return resp.json()["choices"][0]["message"]["content"]
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}"

# === –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π ===
def check_reminders(bot):
    now = datetime.now().strftime("%H:%M")
    reminders = load_json("reminders")
    for uid, entries in reminders.items():
        for item in entries:
            if item["time"] == now:
                try:
                    bot.send_message(chat_id=int(uid), text=f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {item['text']}")
                except:
                    pass

# === Dummy-—Å–µ—Ä–≤–µ—Ä –¥–ª—è Render ===
def run_dummy_server():
    PORT = int(os.environ.get("PORT", 10000))
    Handler = http.server.SimpleHTTPRequestHandler
    with socketserver.TCPServer(("", PORT), Handler) as httpd:
        print(f"Serving dummy server at port {PORT}")
        httpd.serve_forever()

# === –ó–∞–ø—É—Å–∫ ===
def main():
    scheduler.add_job(lambda: check_reminders(bot), "interval", minutes=1)
    app = Application.builder().token(TOKEN).build()
    global bot
    bot = app.bot

    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_menu))

    threading.Thread(target=run_dummy_server, daemon=True).start()
    app.run_polling()

if __name__ == "__main__":
    main()
