import os
import json
import logging
import random
import threading
import http.server
import socketserver
from datetime import datetime

from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from dotenv import load_dotenv
from gtts import gTTS
from apscheduler.schedulers.background import BackgroundScheduler
import httpx

# === –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤ ===
load_dotenv()
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
OPENROUTER_API_KEY = os.getenv("OPENROUTER_API_KEY")
OPENROUTER_MODEL = "openchat/openchat-7b"

logging.basicConfig(level=logging.INFO)

FILES = {
    "users": "users.json",
    "settings": "user_settings.json",
    "profile": "user_profile.json",
    "history": "history.json",
    "reminders": "reminders.json",
    "facts": "facts.py"
}

scheduler = BackgroundScheduler()
scheduler.start()

def load_json(name):
    try:
        with open(FILES[name], "r", encoding="utf-8") as f:
            return json.load(f)
    except:
        return {}

def save_json(name, data):
    with open(FILES[name], "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    users = load_json("users")
    users[str(user.id)] = user.username or user.first_name
    save_json("users", users)

    keyboard = ReplyKeyboardMarkup([
        ["üí¨ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è"],
        ["üîç –ê–Ω–∞–ª–∏–∑ —Å–æ—Å—Ç–∞–≤–∞"],
        ["üìÜ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ"],
        ["üí° –ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç"],
        ["‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"]
    ], resize_keyboard=True)

    greeting = f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! –Ø –ü–æ–ª–∏–Ω–∞ –ü–∞–≤–ª–æ–≤–Ω–∞ üå∏\n" \
               f"–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å —É—Ö–æ–¥–æ–º –∑–∞ –∫–æ–∂–µ–π, —Å–æ—Å—Ç–∞–≤–æ–º —Å—Ä–µ–¥—Å—Ç–≤ –∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏. –í—Å—ë –≤ –æ–¥–Ω–æ–º –º–µ—Å—Ç–µ!"

    await update.message.reply_text(greeting, reply_markup=keyboard)

async def handle_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    user_id = str(update.effective_user.id)

    if text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏":
        keyboard = ReplyKeyboardMarkup([
            ["üéØ –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è"],
            ["üîä –§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞"],
            ["üß† –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ"],
            ["üóÉ –ú–æ—è –∏—Å—Ç–æ—Ä–∏—è"],
            ["‚¨ÖÔ∏è –ù–∞–∑–∞–¥"]
        ], resize_keyboard=True)
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É:", reply_markup=keyboard)

    elif text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        await start(update, context)

    elif text == "üéØ –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è":
        await update.message.reply_text("–ö–∞–∫–æ–π —É —Ç–µ–±—è —Ç–∏–ø –∫–æ–∂–∏?", reply_markup=ReplyKeyboardMarkup([
            ["—Å—É—Ö–∞—è", "–∂–∏—Ä–Ω–∞—è", "–∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è"],
            ["‚¨ÖÔ∏è –ù–∞–∑–∞–¥"]
        ], resize_keyboard=True))

    elif text == "üîä –§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞":
        await update.message.reply_text("–í—ã–±–µ—Ä–∏ —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞:", reply_markup=ReplyKeyboardMarkup([
            ["üìù –¢–µ–∫—Å—Ç", "üîä –ì–æ–ª–æ—Å"],
            ["‚¨ÖÔ∏è –ù–∞–∑–∞–¥"]
        ], resize_keyboard=True))

    elif text == "üß† –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ":
        await update.message.reply_text("–ö–∞–∫ —Ç—ã —Å–µ–±—è —á—É–≤—Å—Ç–≤—É–µ—à—å?", reply_markup=ReplyKeyboardMarkup([
            ["üòÑ –•–æ—Ä–æ—à–æ", "üòê –ù–æ—Ä–º–∞–ª—å–Ω–æ", "üòî –ü–ª–æ—Ö–æ"],
            ["‚¨ÖÔ∏è –ù–∞–∑–∞–¥"]
        ], resize_keyboard=True))

    elif text == "üóÉ –ú–æ—è –∏—Å—Ç–æ—Ä–∏—è":
        history = load_json("history").get(user_id, [])
        if not history:
            await update.message.reply_text("–ò—Å—Ç–æ—Ä–∏—è –ø–æ–∫–∞ –ø—É—Å—Ç–∞.")
        else:
            reply = "\n\n".join([f"‚ùì {h['q']}\nüí¨ {h['a']}" for h in history[-5:]])
            await update.message.reply_text(reply, reply_markup=ReplyKeyboardMarkup([
                ["‚¨ÖÔ∏è –ù–∞–∑–∞–¥"]
            ], resize_keyboard=True))

    elif text == "üí° –ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç":
        try:
            from facts import INTERESTING_FACTS
        except:
            INTERESTING_FACTS = []
        facts = load_json("history").get("facts", [])
        unused = [f for f in INTERESTING_FACTS if f not in facts]
        if not unused:
            facts = []
            unused = INTERESTING_FACTS
        if unused:
            fact = random.choice(unused)
            facts.append(fact)
            h = load_json("history")
            h["facts"] = facts
            save_json("history", h)
            await update.message.reply_text(f"üí° –§–∞–∫—Ç: {fact}")

    elif text == "üìÜ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ":
        await update.message.reply_text("–ù–∞–ø–∏—à–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n21:00 –Ω–∞–Ω–µ—Å—Ç–∏ –∫—Ä–µ–º", reply_markup=ReplyKeyboardMarkup([
            ["‚¨ÖÔ∏è –ù–∞–∑–∞–¥"]
        ], resize_keyboard=True))

    elif text == "üîç –ê–Ω–∞–ª–∏–∑ —Å–æ—Å—Ç–∞–≤–∞":
        context.user_data["mode"] = "analyze"
        await update.message.reply_text("–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ –∏–ª–∏ —Å–æ—Å—Ç–∞–≤ ‚Äî —è —Ä–∞–∑–±–µ—Ä—É!", reply_markup=ReplyKeyboardMarkup([
            ["‚¨ÖÔ∏è –ù–∞–∑–∞–¥"]
        ], resize_keyboard=True))

    elif text == "üí¨ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è":
        context.user_data["mode"] = "recommend"
        await update.message.reply_text("–û–ø–∏—à–∏ –ø—Ä–æ–±–ª–µ–º—É –∏–ª–∏ –∑–∞–¥–∞–π –≤–æ–ø—Ä–æ—Å:", reply_markup=ReplyKeyboardMarkup([
            ["‚¨ÖÔ∏è –ù–∞–∑–∞–¥"]
        ], resize_keyboard=True))

    elif text in ["—Å—É—Ö–∞—è", "–∂–∏—Ä–Ω–∞—è", "–∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è"]:
        profile = load_json("profile")
        profile[user_id] = {"skin": text}
        save_json("profile", profile)
        await update.message.reply_text("–ó–∞–ø–æ–º–Ω–∏–ª–∞ —Ç–∏–ø –∫–æ–∂–∏ üíñ")

    elif text in ["üìù –¢–µ–∫—Å—Ç", "üîä –ì–æ–ª–æ—Å"]:
        settings = load_json("settings")
        settings[user_id] = settings.get(user_id, {})
        settings[user_id]["voice"] = "–ì–æ–ª–æ—Å" in text
        save_json("settings", settings)
        await update.message.reply_text("–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ —Å–æ—Ö—Ä–∞–Ω—ë–Ω üéô")

    elif text in ["üòÑ –•–æ—Ä–æ—à–æ", "üòê –ù–æ—Ä–º–∞–ª—å–Ω–æ", "üòî –ü–ª–æ—Ö–æ"]:
        mood = "good" if "–•–æ—Ä–æ—à–æ" in text else "bad" if "–ü–ª–æ—Ö–æ" in text else "normal"
        settings = load_json("settings")
        settings[user_id] = settings.get(user_id, {})
        settings[user_id]["mood"] = mood
        save_json("settings", settings)
        await update.message.reply_text("–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ —É—á—Ç–µ–Ω–æ ‚ù§Ô∏è")

    elif ":" in text and len(text) >= 8 and text[:5].isdigit():
        hour, minute = map(int, text[:5].split(":"))
        note = text[6:]
        reminders = load_json("reminders")
        reminders.setdefault(user_id, []).append({"time": f"{hour:02}:{minute:02}", "text": note})
        save_json("reminders", reminders)
        await update.message.reply_text("–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ ‚úÖ")

    elif "mode" in context.user_data:
        mode = context.user_data.pop("mode")
        if mode == "recommend":
            prompt = f"–ü–æ—Å–æ–≤–µ—Ç—É–π, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫–∞–∫ –ø–æ—Å—Ç—É–ø–∏—Ç—å. {text}"
        else:
            prompt = text
        result = await analyze_ingredients(prompt)
        await send_response(update, context, user_id, text, result)

def add_to_history(user_id, q, a):
    history = load_json("history")
    history.setdefault(str(user_id), []).append({"q": q, "a": a, "at": datetime.now().isoformat()})
    save_json("history", history)

async def send_response(update, context, user_id, query, answer):
    settings = load_json("settings").get(user_id, {})
    add_to_history(user_id, query, answer)
    if settings.get("voice"):
        tts = gTTS(answer, lang="ru")
        file = f"/tmp/{user_id}_resp.ogg"
        tts.save(file)
        with open(file, "rb") as f:
            await update.message.reply_voice(voice=f)
    else:
        await update.message.reply_text(answer)

async def analyze_ingredients(text):
    headers = {
        "Authorization": f"Bearer {OPENROUTER_API_KEY}",
        "HTTP-Referer": "https://t.me/polina_pavlovna_bot",
        "X-Title": "Cosmetologist Bot"
    }
    payload = {
        "model": OPENROUTER_MODEL,
        "messages": [
            {"role": "system", "content": "–¢—ã –∫–æ—Å–º–µ—Ç–æ–ª–æ–≥. –ü–æ–º–æ–≥–∏ –∏–ª–∏ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–æ—Å—Ç–∞–≤."},
            {"role": "user", "content": text}
        ]
    }
    try:
        async with httpx.AsyncClient(timeout=20.0) as client:
            resp = await client.post("https://openrouter.ai/api/v1/chat/completions", headers=headers, json=payload)
            data = resp.json()
            logging.info(f"OpenRouter response: {data}")
            return data.get("choices", [{}])[0].get("message", {}).get("content", "–û—Ç–≤–µ—Ç –Ω–µ –ø–æ–ª—É—á–µ–Ω.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}")
        return f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}"

def check_reminders(bot):
    now = datetime.now().strftime("%H:%M")
    reminders = load_json("reminders")
    for uid, entries in reminders.items():
        for item in entries:
            if item["time"] == now:
                try:
                    bot.send_message(chat_id=int(uid), text=f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {item['text']}")
                except Exception as e:
                    logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")

def run_dummy_server():
    PORT = int(os.environ.get("PORT", 10000))
    Handler = http.server.SimpleHTTPRequestHandler
    with socketserver.TCPServer(("", PORT), Handler) as httpd:
        print(f"Serving dummy server at port {PORT}")
        httpd.serve_forever()

def main():
    app = Application.builder().token(TOKEN).build()
    global bot
    bot = app.bot
    scheduler.add_job(lambda: check_reminders(bot), "interval", minutes=1)

    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_menu))

    threading.Thread(target=run_dummy_server, daemon=True).start()
    app.run_polling()

if __name__ == "__main__":
    main()
