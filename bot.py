import os
import json
import logging
import random
import http.server
import socketserver
import threading
from datetime import datetime

from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    ConversationHandler,
    filters,
)
from apscheduler.schedulers.background import BackgroundScheduler
from gtts import gTTS
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤
load_dotenv()
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
OPENROUTER_API_KEY = os.getenv("OPENROUTER_API_KEY")

# –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥
MASTER_ADMIN_ID = 5104062125
DATA_FILES = {
    "admins": "admins.json",
    "users": "users.json",
    "settings": "user_settings.json",
    "profiles": "user_profile.json",
    "reminders": "reminders.json",
    "history": "history.json",
}

# –õ–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# ===== –£–¢–ò–õ–ò–¢–´ =====

def load_json(name):
    try:
        with open(DATA_FILES[name], "r", encoding="utf-8") as f:
            return json.load(f)
    except:
        return {}

def save_json(name, data):
    with open(DATA_FILES[name], "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

def is_admin(user_id):
    return user_id == MASTER_ADMIN_ID or str(user_id) in load_json("admins")

def add_to_history(user_id, q, a):
    history = load_json("history")
    history.setdefault(str(user_id), []).append({
        "q": q,
        "a": a,
        "at": datetime.now().isoformat()
    })
    save_json("history", history)

def get_user_settings(user_id):
    settings = load_json("settings")
    return settings.get(str(user_id), {"voice": False, "mood": "normal"})

# ====== HANDLERS ======

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    users = load_json("users")
    users[str(user_id)] = True
    save_json("users", users)

    keyboard = ReplyKeyboardMarkup([
        ["üìÜ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ", "üß¨ –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è"],
        ["üîç –ê–Ω–∞–ª–∏–∑ —Å–æ—Å—Ç–∞–≤–∞", "üß† –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ"],
        ["üîä –§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞", "üóÉ –ú–æ—è –∏—Å—Ç–æ—Ä–∏—è"]
    ], resize_keyboard=True)

    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç, —è –ü–æ–ª–∏–Ω–∞ –ü–∞–≤–ª–æ–≤–Ω–∞ üå∏ –¢–≤–æ–π AI-–∫–æ—Å–º–µ—Ç–æ–ª–æ–≥.", reply_markup=keyboard)

async def text_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    msg = update.message.text

    if msg == "üß¨ –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è":
        await update.message.reply_text("–ö–∞–∫–æ–π —É —Ç–µ–±—è —Ç–∏–ø –∫–æ–∂–∏? (—Å—É—Ö–∞—è / –∂–∏—Ä–Ω–∞—è / –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è)")
        return 1

    if msg == "üìÜ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ":
        await update.message.reply_text("–ù–∞–ø–∏—à–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: 21:00 –Ω–∞–Ω–µ—Å—Ç–∏ –Ω–æ—á–Ω–æ–π –∫—Ä–µ–º")
        return 2

    if msg == "üîç –ê–Ω–∞–ª–∏–∑ —Å–æ—Å—Ç–∞–≤–∞":
        await update.message.reply_text("–ü—Ä–∏—à–ª–∏ —Å–æ—Å—Ç–∞–≤ –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
        return 3

    if msg == "üîä –§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞":
        await update.message.reply_text("–í—ã–±–µ—Ä–∏:", reply_markup=ReplyKeyboardMarkup(
            [["üìù –¢–µ–∫—Å—Ç"], ["üîä –ì–æ–ª–æ—Å"]], resize_keyboard=True
        ))
        return 4

    if msg == "üß† –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ":
        await update.message.reply_text("–ö–∞–∫ —Ç—ã —Å–µ–±—è —á—É–≤—Å—Ç–≤—É–µ—à—å?", reply_markup=ReplyKeyboardMarkup(
            [["üòÑ –•–æ—Ä–æ—à–æ", "üòê –ù–æ—Ä–º–∞–ª—å–Ω–æ", "üòî –ü–ª–æ—Ö–æ"]], resize_keyboard=True
        ))
        return 5

    if msg == "üóÉ –ú–æ—è –∏—Å—Ç–æ—Ä–∏—è":
        history = load_json("history").get(str(user_id), [])
        if not history:
            await update.message.reply_text("–ò—Å—Ç–æ—Ä–∏—è –ø–æ–∫–∞ –ø—É—Å—Ç–∞.")
        else:
            reply = "\n\n".join([f"‚ùì {h['q']}\nüí¨ {h['a']}" for h in history[-5:]])
            await update.message.reply_text(reply)

async def personalization_step(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    profiles = load_json("profiles")
    profiles[str(user_id)] = {"skin": update.message.text}
    save_json("profiles", profiles)
    await update.message.reply_text("–ó–∞–ø–æ–º–Ω–∏–ª–∞ üå∏")
    return ConversationHandler.END

async def reminder_step(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    time_text = update.message.text
    try:
        t, note = time_text.split(" ", 1)
        hour, minute = map(int, t.split(":"))
        scheduler.add_job(
            lambda: context.bot.send_message(chat_id=user_id, text=f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {note}"),
            trigger="cron", hour=hour, minute=minute, id=f"{user_id}_{note}"
        )
        await update.message.reply_text("–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ ‚úÖ")
    except:
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä: 21:00 –Ω–∞–Ω–µ—Å—Ç–∏ –∫—Ä–µ–º.")
    return ConversationHandler.END

async def analyze_step(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    query = update.message.text
    # –≠–º—É–ª—è—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞
    result = f"üß™ –ê–Ω–∞–ª–∏–∑:\n\n{query}\n\nüåø –≠—Ç–æ —Å—Ä–µ–¥—Å—Ç–≤–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–ª–µ–∑–Ω—ã–º, –µ—Å–ª–∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–ø–∏—Ä—Ç–∞."
    add_to_history(user_id, query, result)

    settings = get_user_settings(user_id)
    if settings.get("voice"):
        tts = gTTS(result, lang="ru")
        audio_file = f"/tmp/{user_id}_voice.ogg"
        tts.save(audio_file)
        with open(audio_file, "rb") as f:
            await update.message.reply_voice(voice=f)
    else:
        await update.message.reply_text(result)
    return ConversationHandler.END

async def voice_setting(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    choice = update.message.text
    settings = load_json("settings")
    settings[str(user_id)] = settings.get(str(user_id), {})
    settings[str(user_id)]["voice"] = True if "–ì–æ–ª–æ—Å" in choice else False
    save_json("settings", settings)
    await update.message.reply_text("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ ‚úÖ")
    return ConversationHandler.END

async def mood_setting(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    mood = "good" if "–•–æ—Ä–æ—à–æ" in update.message.text else "bad" if "–ü–ª–æ—Ö–æ" in update.message.text else "normal"
    settings = load_json("settings")
    settings[str(user_id)] = settings.get(str(user_id), {})
    settings[str(user_id)]["mood"] = mood
    save_json("settings", settings)
    await update.message.reply_text("–£—á—Ç—É —ç—Ç–æ –≤ —Å–≤–æ–∏—Ö –æ—Ç–≤–µ—Ç–∞—Ö üß†")
    return ConversationHandler.END

# ===== –°–ï–†–í–ï–† –î–õ–Ø RENDER =====

def run_dummy_server():
    PORT = int(os.environ.get("PORT", 10000))
    Handler = http.server.SimpleHTTPRequestHandler
    with socketserver.TCPServer(("", PORT), Handler) as httpd:
        print(f"Serving dummy server at port {PORT}")
        httpd.serve_forever()

# ===== –û–°–ù–û–í–ù–û–ô –ó–ê–ü–£–°–ö =====

def main():
    global scheduler
    scheduler = BackgroundScheduler()
    scheduler.start()

    app = Application.builder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, text_handler))

    app.add_handler(ConversationHandler(
        entry_points=[MessageHandler(filters.TEXT, text_handler)],
        states={
            1: [MessageHandler(filters.TEXT, personalization_step)],
            2: [MessageHandler(filters.TEXT, reminder_step)],
            3: [MessageHandler(filters.TEXT, analyze_step)],
            4: [MessageHandler(filters.TEXT, voice_setting)],
            5: [MessageHandler(filters.TEXT, mood_setting)],
        },
        fallbacks=[]
    ))

    app.run_polling()

# üî• –ó–∞–ø—É—Å–∫ –ø–æ—Ä—Ç–∞ + –±–æ—Ç–∞
threading.Thread(target=run_dummy_server, daemon=True).start()
main()
